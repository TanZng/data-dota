services:
  postgres:
    image: postgres:13.8-bullseye
    hostname: postgres
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - type: bind
        source: ./tmp/postgres-data
        target: /var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
  redis: 
    image: redis:6.0.16-bullseye
    hostname: redis
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - type: bind
        source: ./tmp/redis-data
        target: /data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
  mongo:
    image: mongo:6.0.2-focal
    hostname: mongo7687
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME:
      MONGO_INITDB_ROOT_PASSWORD:
    ports:
        - "27017:27017"
        - "27018:27018"
    volumes:
      - type: bind
        source: ./tmp/mongo-data
        target: /data/db
  neo:
    image: neo4j:5.1.0
    hostname: neo
    container_name: neo
    restart: always
    environment:
      - NEO4J_AUTH=none
      - NEO4J_server.bolt.advertised_address=neo:7687
    ports:
        - "7474:7474"
        - "7687:7687"
    volumes:
      - ./tmp/neo4j-data:/data
  postgres2:
    image: postgres:13.8-bullseye
    hostname: postgres2
    container_name: postgres2
    restart: always
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - type: bind
        source: ./tmp/postgres-data2
        target: /var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5
  neo-dash:
    image: nielsdejong/neodash:2.2.0
    hostname: neodash
    container_name: neodash
    restart: always
    ports:
        - "5005:5005"
  motor-admin:
    image: 'motoradmin/motoradmin:0.3.16'
    hostname: motor-admin
    container_name: motor-admin
    ports:
      - '3020:3000'
    volumes:
      - type: bind
        source: ./tmp/motor-admin
        target: /data
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SECRET_KEY_BASE:
      DATABASE_URL: postgresql://postgres:postgres@postgres2:5432/postgres
  mock-api:
    build:
      context: ./mock-api
      dockerfile: ../mock-api/Dockerfile
    hostname: mock-api
    container_name: mock-api
    ports:
      - "5010:5010"
  postgres-airflow:
    container_name: postgres-airflow
    extends:
      file: airflow-compose.yaml
      service: postgres-airflow
  redis-airflow:
    container_name: redis-airflow
    extends:
      file: airflow-compose.yaml
      service: redis-airflow
  airflow-webserver:
    container_name: airflow-webserver
    extends:
      file: airflow-compose.yaml
      service: airflow-webserver
  airflow-scheduler:
    container_name: airflow-scheduler
    extends:
      file: airflow-compose.yaml
      service: airflow-scheduler
  airflow-worker:
    container_name: airflow-worker
    extends:
      file: airflow-compose.yaml
      service: airflow-worker  
  airflow-init:
    container_name: airflow-init
    profiles: ["init"]
    extends:
      file: airflow-compose.yaml
      service: airflow-init
  flower:
    container_name: airflow-flower
    extends:
      file: airflow-compose.yaml
      service: flower
  docker-socket-proxy:
    extends:
      file: docker-socket-proxy.yaml
      service: docker-socket-proxy
networks:
  default:
    name: data-dota
